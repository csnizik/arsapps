name: Stage and Production Deployment

on:
  push:
    branches: [ stage ]
    tags:
      - 'prod_*'
  workflow_dispatch:

env:
  REGISTRY: your-acr-registry.azurecr.io
  IMAGE_NAME: drupal-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      IS_PRODUCTION: ${{ startsWith(github.ref, 'refs/tags/prod_') }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
        tools: composer:v2
        
    - name: Get Composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Install Composer dependencies
      uses: ramsey/composer-install@v3
      with:
        dependency-versions: "locked"
        composer-options: "--prefer-dist --no-progress --no-dev --optimize-autoloader"
        
    - name: Run Composer security audit
      run: composer audit
      
    - name: Enhanced security audit for production
      if: env.IS_PRODUCTION == 'true'
      run: |
        echo "Running enhanced security checks for production deployment..."
        
        # Verify no development dependencies
        if [ -d "vendor/phpunit" ] || [ -d "vendor/behat" ]; then
          echo "Error: Development dependencies found in production build"
          exit 1
        fi
        
        # Check for debug configurations
        if grep -r "xdebug" web/ --exclude-dir=vendor 2>/dev/null; then
          echo "Warning: Xdebug references found in codebase"
        fi
        
        # Ensure settings.php is production-ready
        if [ -f "web/sites/default/settings.php" ]; then
          if grep -q "assert_options.*ASSERT_ACTIVE.*1" web/sites/default/settings.php; then
            echo "Error: Assertions enabled in production settings"
            exit 1
          fi
        fi
        
        echo "Production security audit completed successfully"
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build frontend assets
      run: npm run build
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stage,enable=${{ github.ref == 'refs/heads/stage' }}
          type=raw,value=production,enable=${{ startsWith(github.ref, 'refs/tags/prod_') }}
          type=sha,prefix={{branch}}-,enable=${{ github.ref == 'refs/heads/stage' }}
          type=sha,prefix=prod-,enable=${{ startsWith(github.ref, 'refs/tags/prod_') }}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          ENVIRONMENT=${{ env.IS_PRODUCTION == 'true' && 'production' || 'staging' }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          
    - name: Run security scan on built image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stage
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Output image digest
      run: |
        echo "Image pushed with tags: ${{ steps.meta.outputs.tags }}"
        echo "Image digest: ${{ steps.build.outputs.digest }}"